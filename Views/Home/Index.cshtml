
@{
    ViewBag.Title = "Chat";
    Layout = null;
}

<!doctype html>
<html lang="pt-br" data-layout="vertical" data-topbar="light" data-sidebar="dark" data-sidebar-size="sm-hover" data-sidebar-image="none" data-preloader="disable">
<head>
    <meta charset="utf-8" />
    <title>Chat Moderno - SignalR</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta content="Sistema de Chat em Tempo Real" name="description" />
    <meta content="SignalR" name="author" />
    
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Remix Icons -->
    <link href="https://cdn.jsdelivr.net/npm/remixicon@3.5.0/fonts/remixicon.css" rel="stylesheet">
    <!-- BoxIcons -->
    <link href="https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css" rel="stylesheet">
    
    <style>
        :root {
            --vz-sidebar-bg: #25293c;
            --vz-sidebar-item-color: #a6b0cf;
            --vz-sidebar-item-hover-bg: #2a2f42;
            --vz-sidebar-item-active-bg: #3577f0;
            --vz-sidebar-item-active-color: #fff;
            --vz-chat-bg: #32394e;
            --vz-chat-message-bg: #3a4056;
            --vz-border-color: #32394e;
            --vz-body-bg: #212529;
            --vz-success: #0ab39c;
            --vz-primary: #3577f0;
        }

        body {
            background-color: var(--vz-body-bg);
            font-family: 'Inter', sans-serif;
            color: #fff;
        }
        
        .chat-wrapper {
            height: 100vh;
            background-color: var(--vz-sidebar-bg);
            border-radius: 0;
            margin: -12px;
        }
        
        .chat-leftsidebar {
            width: 280px;
            border-right: 1px solid var(--vz-border-color);
            background-color: var(--vz-sidebar-bg);
            height: 100vh;
        }
        
        .user-chat {
            background-color: var(--vz-chat-bg);
            height: 100vh;
        }
        
        .chat-conversation {
            height: calc(100vh - 180px);
            overflow-y: auto;
            background: var(--vz-chat-bg);
            padding: 1.5rem;
        }
        
        .chat-input-section {
            border-top: 1px solid var(--vz-border-color);
            background-color: var(--vz-chat-bg);
            padding: 1rem 1.5rem;
        }
        
        .chat-user-list li {
            padding: 0.75rem 1rem;
            border-bottom: 1px solid rgba(255,255,255,0.05);
            cursor: pointer;
            transition: all 0.3s ease;
            color: var(--vz-sidebar-item-color);
        }
        
        .chat-user-list li:hover {
            background-color: var(--vz-sidebar-item-hover-bg);
        }
        
        .chat-user-list li.active {
            background-color: var(--vz-sidebar-item-active-bg);
            color: var(--vz-sidebar-item-active-color);
        }
        
        .message {
            margin-bottom: 1.5rem;
            display: flex;
            align-items: flex-start;
        }
        
        .message.sent {
            flex-direction: row-reverse;
        }
        
        .message.received {
            flex-direction: row;
        }
        
        .message-avatar {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            margin: 0 10px;
            background: linear-gradient(45deg, #3577f0, #0ab39c);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: 600;
            font-size: 0.75rem;
            flex-shrink: 0;
        }
        
        .message-content-wrapper {
            max-width: 65%;
        }
        
        .message-content {
            padding: 0.75rem 1rem;
            border-radius: 1rem;
            position: relative;
            word-wrap: break-word;
        }
        
        .message.sent .message-content {
            background-color: var(--vz-primary);
            color: white;
            border-bottom-right-radius: 0.25rem;
        }
        
        .message.received .message-content {
            background-color: var(--vz-chat-message-bg);
            color: #a6b0cf;
            border-bottom-left-radius: 0.25rem;
        }
        
        .message-time {
            font-size: 0.6875rem;
            color: #6c757d;
            margin-top: 0.25rem;
            margin-left: 0.5rem;
        }
        
        .message.sent .message-time {
            text-align: right;
            margin-right: 0.5rem;
            margin-left: 0;
        }
        
        .message-sender {
            font-size: 0.75rem;
            font-weight: 600;
            color: var(--vz-primary);
            margin-bottom: 0.25rem;
            margin-left: 0.5rem;
        }
        
        .user-status {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            position: absolute;
            bottom: 2px;
            right: 2px;
            border: 2px solid var(--vz-sidebar-bg);
            background-color: var(--vz-success);
        }
        
        .avatar-xs {
            width: 2rem;
            height: 2rem;
            border-radius: 50%;
            background: linear-gradient(45deg, #3577f0, #0ab39c);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: 600;
            position: relative;
        }
        
        .search-box {
            position: relative;
            margin-bottom: 1rem;
        }
        
        .search-box input {
            background-color: rgba(255,255,255,0.05) !important;
            border: 1px solid rgba(255,255,255,0.1) !important;
            color: #a6b0cf !important;
            padding-right: 2.5rem;
        }
        
        .search-box input::placeholder {
            color: #6c757d;
        }
        
        .search-box .search-icon {
            position: absolute;
            top: 50%;
            right: 0.75rem;
            transform: translateY(-50%);
            color: #6c757d;
        }
        
        .nav-tabs-custom {
            border-bottom: 1px solid rgba(255,255,255,0.1);
            background-color: var(--vz-sidebar-bg);
        }
        
        .nav-tabs-custom .nav-link {
            border: none;
            color: var(--vz-sidebar-item-color);
            font-weight: 500;
            background: transparent;
        }
        
        .nav-tabs-custom .nav-link.active {
            color: var(--vz-primary);
            border-bottom: 2px solid var(--vz-primary);
            background: transparent;
        }
        
        .chat-topbar {
            background-color: var(--vz-chat-bg);
            border-bottom: 1px solid var(--vz-border-color);
            padding: 1rem 1.5rem;
        }
        
        .chat-topbar h5 {
            color: #fff;
            margin: 0;
        }
        
        .chat-topbar .text-muted {
            color: #a6b0cf !important;
            font-size: 0.8125rem;
        }
        
        #loginSection {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .login-card {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 1rem;
            padding: 2rem;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }
        
        .system-message {
            margin: 1rem 0;
            text-align: center;
        }
        
        .system-message-content {
            display: inline-block;
            background-color: rgba(108, 117, 125, 0.1);
            padding: 0.25rem 0.75rem;
            border-radius: 1rem;
            border: 1px solid rgba(108, 117, 125, 0.2);
            font-size: 0.75rem;
            color: #6c757d;
        }
        
        .toast-container {
            z-index: 9999;
        }
        
        .chat-leftsidebar .p-4 {
            padding: 1.5rem 1rem !important;
        }
        
        .sidebar-header {
            color: #fff;
            font-weight: 600;
            margin-bottom: 1rem;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }
        
        .sidebar-header .btn {
            background: rgba(255,255,255,0.1);
            border: none;
            color: #a6b0cf;
            width: 32px;
            height: 32px;
            border-radius: 6px;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .sidebar-header .btn:hover {
            background: rgba(255,255,255,0.2);
            color: #fff;
        }
        
        .section-title {
            color: #6c757d;
            font-size: 0.6875rem;
            text-transform: uppercase;
            font-weight: 600;
            margin: 1rem 0 0.5rem 0;
            letter-spacing: 0.5px;
        }
        
        .chat-input {
            background-color: rgba(255,255,255,0.05) !important;
            border: 1px solid rgba(255,255,255,0.1) !important;
            color: #a6b0cf !important;
        }
        
        .chat-input::placeholder {
            color: #6c757d;
        }
        
        .chat-send {
            background-color: var(--vz-primary) !important;
            border-color: var(--vz-primary) !important;
        }
        
        .btn-link {
            color: #a6b0cf !important;
        }
        
        .btn-link:hover {
            color: #fff !important;
        }
        
        .online-badge {
            background-color: var(--vz-success) !important;
            font-size: 0.6875rem;
            padding: 0.25rem 0.5rem;
        }

        /* Scrollbar customization */
        .chat-conversation::-webkit-scrollbar {
            width: 6px;
        }
        
        .chat-conversation::-webkit-scrollbar-track {
            background: rgba(255,255,255,0.05);
        }
        
        .chat-conversation::-webkit-scrollbar-thumb {
            background: rgba(255,255,255,0.2);
            border-radius: 3px;
        }
        
        .chat-conversation::-webkit-scrollbar-thumb:hover {
            background: rgba(255,255,255,0.3);
        }

        /* Avatar generator styles */
        .avatar-img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            border-radius: 50%;
        }

        /* Audio recording styles */
        .recording {
            background-color: #dc3545 !important;
            color: white !important;
        }

        .audio-message {
            display: flex;
            align-items: center;
            padding: 0.75rem 1rem;
            border-radius: 1rem;
            min-width: 200px;
        }

        .audio-controls {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .audio-play-btn {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            border: none;
            background-color: var(--vz-primary);
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
        }

        .audio-play-btn:hover {
            background-color: #2a5fc7;
        }

        .audio-duration {
            font-size: 0.8rem;
            color: #6c757d;
            min-width: 40px;
        }

        .audio-waveform {
            flex: 1;
            height: 20px;
            background: linear-gradient(to right, var(--vz-primary) 0%, rgba(53, 119, 240, 0.3) 100%);
            border-radius: 10px;
            position: relative;
            overflow: hidden;
        }

        .audio-progress {
            height: 100%;
            background-color: var(--vz-primary);
            border-radius: 10px;
            width: 0%;
            transition: width 0.1s ease;
        }
    </style>
</head>

<body>
    <!-- Login Section -->
    <div id="loginSection">
        <div class="login-card">
            <div class="text-center mb-4">
                <h3 class="text-dark">💬 Chat Moderno</h3>
                <p class="text-muted">Entre com seu nome para começar</p>
            </div>
            <div class="mb-3">
                <input type="text" id="usernameInput" class="form-control" placeholder="Digite seu nome..." maxlength="20">
            </div>
            <button id="joinChatBtn" class="btn btn-primary w-100">Entrar no Chat</button>
        </div>
    </div>

    <!-- Chat Section -->
    <div id="chatSection" style="display: none;">
        <div class="chat-wrapper d-lg-flex">
            <!-- Left Sidebar -->
            <div class="chat-leftsidebar">
                <div class="p-4">
                    <div class="sidebar-header">
                        <h5>Chats</h5>
                        <button type="button" class="btn" onclick="toggleChatMode()">
                            <i class="ri-add-line"></i>
                        </button>
                    </div>
                    
                    <div class="search-box">
                        <input type="text" class="form-control" placeholder="Buscar..." id="searchUsers">
                        <i class="ri-search-2-line search-icon"></i>
                    </div>
                </div>

                <ul class="nav nav-tabs nav-tabs-custom nav-justified" role="tablist">
                    <li class="nav-item">
                        <a class="nav-link active" data-bs-toggle="tab" href="#chats" role="tab">
                            Chats
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" data-bs-toggle="tab" href="#contacts" role="tab">
                            Contatos
                        </a>
                    </li>
                </ul>

                <div class="tab-content">
                    <div class="tab-pane active" id="chats" role="tabpanel">
                        <div class="px-3">
                            <div class="section-title">MENSAGENS DIRETAS</div>
                            <ul class="list-unstyled chat-user-list" id="userList">
                                <li onclick="selectPublicChat()" class="active">
                                    <div class="d-flex align-items-center">
                                        <div class="flex-shrink-0 me-3">
                                            <div class="avatar-xs">
                                                <i class="ri-group-line"></i>
                                            </div>
                                        </div>
                                        <div class="flex-grow-1">
                                            <h6 class="mb-0 fs-14">Geral</h6>
                                            <p class="text-muted mb-0 fs-12">Chat público</p>
                                        </div>
                                    </div>
                                </li>
                            </ul>
                        </div>
                    </div>
                    
                    <div class="tab-pane" id="contacts" role="tabpanel">
                        <div class="px-3">
                            <div class="section-title">USUÁRIOS ONLINE</div>
                            <div id="onlineUsersList">
                                <!-- Online users will be populated here -->
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Main Chat Area -->
            <div class="user-chat w-100">
                <!-- Chat Header -->
                <div class="chat-topbar">
                    <div class="row align-items-center">
                        <div class="col-sm-4 col-8">
                            <div class="d-flex align-items-center">
                                <div class="flex-shrink-0 me-3">
                                    <div class="avatar-xs" id="chatHeaderAvatar">
                                        <i class="ri-group-line"></i>
                                    </div>
                                </div>
                                <div class="flex-grow-1">
                                    <h5 id="chatHeaderTitle">Geral</h5>
                                    <p class="text-muted mb-0 fs-13" id="chatHeaderStatus">Chat público</p>
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-8 col-4">
                            <ul class="list-inline text-end mb-0">
                                <li class="list-inline-item">
                                    <span class="badge online-badge" id="onlineCount">0 online</span>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>

                <!-- Chat Messages -->
                <div class="chat-conversation">
                    <ul class="list-unstyled mb-0" id="messagesList">
                        <!-- Messages will be populated here -->
                    </ul>
                </div>

                <!-- Chat Input -->
                <div class="chat-input-section">
                    <form id="messageForm">
                        <div class="row g-0 align-items-center">
                            <div class="col-auto">
                                <button type="button" class="btn btn-link" onclick="addEmoji()">
                                    <i class="bx bx-smile"></i>
                                </button>
                            </div>
                            <div class="col-auto">
                                <button type="button" class="btn btn-link" id="audioBtn" onclick="toggleAudioRecording()">
                                    <i class="bx bx-microphone" id="audioIcon"></i>
                                </button>
                            </div>
                            <div class="col">
                                <input type="text" class="form-control chat-input" 
                                       id="messageInput" placeholder="Digite sua mensagem..." autocomplete="off" maxlength="500">
                            </div>
                            <div class="col-auto">
                                <button type="submit" class="btn btn-primary chat-send ms-2">
                                    <i class="ri-send-plane-2-fill"></i>
                                </button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <!-- SignalR -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.0/signalr.min.js"></script>

    <script>
        let connection;
        let currentUser = '';
        let currentChat = 'public';
        let selectedUser = null;
        
        // Audio recording variables
        let mediaRecorder;
        let audioChunks = [];
        let isRecording = false;
        let recordingStartTime;

        // User avatars mapping
        const userAvatars = {};

        // Generate avatar for user
        function generateAvatar(username) {
            if (!userAvatars[username]) {
                const colors = [
                    'linear-gradient(45deg, #3577f0, #0ab39c)',
                    'linear-gradient(45deg, #f06548, #ffc107)',
                    'linear-gradient(45deg, #6f42c1, #e83e8c)',
                    'linear-gradient(45deg, #20c997, #198754)',
                    'linear-gradient(45deg, #fd7e14, #dc3545)',
                    'linear-gradient(45deg, #0dcaf0, #6610f2)'
                ];
                const colorIndex = username.charCodeAt(0) % colors.length;
                userAvatars[username] = {
                    color: colors[colorIndex],
                    initial: username.charAt(0).toUpperCase()
                };
            }
            return userAvatars[username];
        }

        // Initialize SignalR connection
        async function startConnection() {
            try {
                if (connection) {
                    await connection.stop();
                }

                connection = new signalR.HubConnectionBuilder()
                    .withUrl("/chatHub")
                    .withAutomaticReconnect()
                    .configureLogging(signalR.LogLevel.Information)
                    .build();

                // Connection events
                connection.onclose(async () => {
                    console.log('Conexão fechada. Tentando reconectar...');
                    setTimeout(async () => {
                        await startConnection();
                    }, 5000);
                });

                connection.onreconnecting(() => {
                    console.log('Reconectando...');
                });

                connection.onreconnected(() => {
                    console.log('Reconectado com sucesso!');
                    if (currentUser) {
                        connection.invoke("JoinChat", currentUser);
                    }
                });

            // Message events
            connection.on("ReceivePublicMessage", (userName, message, time) => {
                addMessage(userName, message, time, 'public');
            });

            connection.on("ReceivePrivateMessage", (senderName, message, time) => {
                if (currentChat === 'private' && selectedUser === senderName) {
                    addMessage(senderName, message, time, 'private', false);
                }
                highlightUserInList(senderName);
            });

            connection.on("PrivateMessageSent", (receiverName, message, time) => {
                if (currentChat === 'private' && selectedUser === receiverName) {
                    addMessage(currentUser, message, time, 'private', true);
                }
            });

            connection.on("ReceivePublicAudio", (userName, audioData, duration, time) => {
                console.log('Áudio público recebido de:', userName);
                addAudioMessage(userName, audioData, duration, time, 'public');
            });

            connection.on("ReceivePrivateAudio", (senderName, audioData, duration, time) => {
                console.log('Áudio privado recebido de:', senderName);
                if (currentChat === 'private' && selectedUser === senderName) {
                    addAudioMessage(senderName, audioData, duration, time, 'private', false);
                }
                highlightUserInList(senderName);
                showNotification(`🎵 Áudio recebido de ${senderName}`, 'info');
            });

            connection.on("PrivateAudioSent", (receiverName, audioData, duration, time) => {
                console.log('Áudio privado enviado para:', receiverName);
                if (currentChat === 'private' && selectedUser === receiverName) {
                    addAudioMessage(currentUser, audioData, duration, time, 'private', true);
                }
            });

            connection.on("UserJoined", (userName) => {
                updateUsersList();
                showNotification(`🎉 ${userName} entrou na conversa`, 'success');
                addSystemMessage(`${userName} entrou na conversa`);
            });

            connection.on("UserDisconnected", (userName) => {
                updateUsersList();
                showNotification(`👋 ${userName} saiu da conversa`, 'info');
                addSystemMessage(`${userName} saiu da conversa`);
            });

            connection.on("UpdateUsersList", (users) => {
                populateUsersList(users);
                updateOnlineCount(users.length);
            });

            connection.on("UserNotFound", (receiverName) => {
                showNotification(`Usuário ${receiverName} não encontrado`, 'error');
            });

            await connection.start();
                console.log('Conexão SignalR estabelecida');
            } catch (error) {
                console.error('Erro ao conectar:', error);
                setTimeout(async () => {
                    await startConnection();
                }, 5000);
            }
        }

        // Join chat
        async function joinChat() {
            const username = document.getElementById('usernameInput').value.trim();
            if (username.length < 2) {
                alert('Nome deve ter pelo menos 2 caracteres');
                return;
            }
            
            currentUser = username;
            
            try {
                await startConnection();
                
                if (connection.state === signalR.HubConnectionState.Connected) {
                    await connection.invoke("JoinChat", username);
                    
                    document.getElementById('loginSection').style.display = 'none';
                    document.getElementById('chatSection').style.display = 'block';
                } else {
                    alert('Erro de conexão. Tente novamente.');
                }
            } catch (error) {
                console.error('Erro ao entrar no chat:', error);
                alert('Erro ao conectar. Tente novamente.');
            }
        }

        // Send message
        async function sendMessage() {
            const messageInput = document.getElementById('messageInput');
            const message = messageInput.value.trim();
            
            if (message === '') return;

            try {
                if (currentChat === 'public') {
                    await connection.invoke("SendPublicMessage", currentUser, message);
                } else if (currentChat === 'private' && selectedUser) {
                    await connection.invoke("SendPrivateMessage", currentUser, selectedUser, message);
                }
                messageInput.value = '';
            } catch (err) {
                console.error('Erro ao enviar mensagem:', err);
            }
        }

        // Add message to chat
        function addMessage(userName, message, time, chatType, isSent = false) {
            if ((chatType === 'public' && currentChat !== 'public') || 
                (chatType === 'private' && currentChat !== 'private')) {
                return;
            }

            const messagesList = document.getElementById('messagesList');
            const isCurrentUser = userName === currentUser || isSent;
            const avatar = generateAvatar(userName);
            
            const messageElement = document.createElement('li');
            messageElement.className = `message ${isCurrentUser ? 'sent' : 'received'}`;
            
            messageElement.innerHTML = `
                <div class="message-avatar" style="background: ${avatar.color}">
                    ${avatar.initial}
                </div>
                <div class="message-content-wrapper">
                    ${!isCurrentUser ? `<div class="message-sender">${userName}</div>` : ''}
                    <div class="message-content">
                        ${escapeHtml(message)}
                    </div>
                    <div class="message-time">${time}</div>
                </div>
            `;
            
            messagesList.appendChild(messageElement);
            scrollToBottom();
        }

        // Add system message (for join/leave notifications)
        function addSystemMessage(message) {
            if (currentChat !== 'public') return;
            
            const messagesList = document.getElementById('messagesList');
            const messageElement = document.createElement('li');
            messageElement.className = 'system-message';
            
            messageElement.innerHTML = `
                <div class="system-message-content">
                    <i class="ri-information-line me-1"></i>
                    ${escapeHtml(message)}
                </div>
            `;
            
            messagesList.appendChild(messageElement);
            scrollToBottom();
        }

        // Populate users list
        function populateUsersList(users) {
            const userList = document.getElementById('userList');
            const onlineUsersList = document.getElementById('onlineUsersList');
            
            // Clear existing private chats (keep public chat)
            const publicChat = userList.querySelector('li');
            userList.innerHTML = '';
            userList.appendChild(publicChat);
            
            // Clear online users
            onlineUsersList.innerHTML = '';

            users.forEach(user => {
                if (user !== currentUser) {
                    const avatar = generateAvatar(user);
                    
                    // Add to chat list
                    const userItem = document.createElement('li');
                    userItem.onclick = () => selectPrivateChat(user);
                    userItem.innerHTML = `
                        <div class="d-flex align-items-center">
                            <div class="flex-shrink-0 me-3">
                                <div class="avatar-xs" style="background: ${avatar.color}">
                                    ${avatar.initial}
                                    <span class="user-status"></span>
                                </div>
                            </div>
                            <div class="flex-grow-1">
                                <h6 class="mb-0 fs-14">${user}</h6>
                                <p class="text-muted mb-0 fs-12">Online</p>
                            </div>
                        </div>
                    `;
                    userList.appendChild(userItem);

                    // Add to online users tab
                    const onlineUserItem = document.createElement('div');
                    onlineUserItem.className = 'py-2 border-bottom';
                    onlineUserItem.onclick = () => selectPrivateChat(user);
                    onlineUserItem.style.cursor = 'pointer';
                    onlineUserItem.innerHTML = `
                        <div class="d-flex align-items-center">
                            <div class="flex-shrink-0 me-3">
                                <div class="avatar-xs" style="background: ${avatar.color}">
                                    ${avatar.initial}
                                </div>
                            </div>
                            <div class="flex-grow-1">
                                <h6 class="mb-0 fs-14 text-light">${user}</h6>
                                <p class="text-muted mb-0 fs-12">Online</p>
                            </div>
                        </div>
                    `;
                    onlineUsersList.appendChild(onlineUserItem);
                }
            });
        }

        // Select public chat
        function selectPublicChat() {
            currentChat = 'public';
            selectedUser = null;
            
            // Update UI
            document.getElementById('chatHeaderTitle').textContent = 'Geral';
            document.getElementById('chatHeaderStatus').textContent = 'Chat público';
            document.getElementById('chatHeaderAvatar').innerHTML = '<i class="ri-group-line"></i>';
            document.getElementById('chatHeaderAvatar').style.background = 'linear-gradient(45deg, #3577f0, #0ab39c)';
            
            // Clear messages and update active state
            clearMessages();
            updateActiveChat('public');
        }

        // Select private chat
        function selectPrivateChat(userName) {
            currentChat = 'private';
            selectedUser = userName;
            const avatar = generateAvatar(userName);
            
            // Update UI
            document.getElementById('chatHeaderTitle').textContent = userName;
            document.getElementById('chatHeaderStatus').textContent = 'Online';
            document.getElementById('chatHeaderAvatar').innerHTML = avatar.initial;
            document.getElementById('chatHeaderAvatar').style.background = avatar.color;
            
            // Clear messages and update active state
            clearMessages();
            updateActiveChat(userName);
        }

        // Update active chat in sidebar
        function updateActiveChat(chatId) {
            const userListItems = document.querySelectorAll('#userList li');
            userListItems.forEach(item => {
                item.classList.remove('active');
                if ((chatId === 'public' && item.textContent.includes('Geral')) ||
                    (chatId !== 'public' && item.textContent.includes(chatId))) {
                    item.classList.add('active');
                }
            });
        }

        // Clear messages
        function clearMessages() {
            document.getElementById('messagesList').innerHTML = '';
        }

        // Update online count
        function updateOnlineCount(count) {
            document.getElementById('onlineCount').textContent = `${count} online`;
        }

        // Highlight user in list (for new private messages)
        function highlightUserInList(userName) {
            // Add visual indicator for new message
        }

        // Show notification
        function showNotification(message, type = 'info') {
            console.log(`${type}: ${message}`);
            
            // Create toast notification
            const toastContainer = document.getElementById('toastContainer') || createToastContainer();
            
            const toast = document.createElement('div');
            toast.className = `toast show align-items-center border-0`;
            toast.setAttribute('role', 'alert');
            toast.setAttribute('aria-live', 'assertive');
            toast.setAttribute('aria-atomic', 'true');
            
            let bgClass = 'bg-primary';
            let icon = 'ri-information-line';
            
            switch(type) {
                case 'success':
                    bgClass = 'bg-success';
                    icon = 'ri-check-line';
                    break;
                case 'error':
                    bgClass = 'bg-danger';
                    icon = 'ri-error-warning-line';
                    break;
                case 'warning':
                    bgClass = 'bg-warning';
                    icon = 'ri-alert-line';
                    break;
            }
            
            toast.className += ` ${bgClass} text-white`;
            
            toast.innerHTML = `
                <div class="d-flex">
                    <div class="toast-body">
                        <i class="${icon} me-2"></i>
                        ${message}
                    </div>
                    <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
                </div>
            `;
            
            toastContainer.appendChild(toast);
            
            // Auto remove after 3 seconds
            setTimeout(() => {
                if (toast.parentNode) {
                    toast.parentNode.removeChild(toast);
                }
            }, 3000);
        }
        
        function createToastContainer() {
            const container = document.createElement('div');
            container.id = 'toastContainer';
            container.className = 'toast-container position-fixed top-0 end-0 p-3';
            container.style.zIndex = '9999';
            document.body.appendChild(container);
            return container;
        }

        // Utility functions
        function escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }

        function scrollToBottom() {
            const chatMessages = document.getElementById('chatMessages') || document.querySelector('.chat-conversation');
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }

        function addEmoji() {
            const messageInput = document.getElementById('messageInput');
            messageInput.value += '😊';
            messageInput.focus();
        }

        // Audio recording functions
        let audioStream = null;

        async function toggleAudioRecording() {
            if (!isRecording) {
                await startRecording();
            } else {
                await stopRecording();
            }
        }

        async function startRecording() {
            try {
                // Check if browser supports getUserMedia
                if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
                    showNotification('Seu navegador não suporta gravação de áudio.', 'error');
                    return;
                }

                // Request microphone access
                audioStream = await navigator.mediaDevices.getUserMedia({ 
                    audio: {
                        echoCancellation: true,
                        noiseSuppression: true,
                        autoGainControl: true,
                        sampleRate: 44100
                    } 
                });
                
                // Check if MediaRecorder is supported
                if (!window.MediaRecorder) {
                    showNotification('Gravação de áudio não é suportada neste navegador.', 'error');
                    audioStream.getTracks().forEach(track => track.stop());
                    return;
                }

                // Determine the best audio format
                let mimeType = 'audio/webm';
                if (MediaRecorder.isTypeSupported('audio/webm;codecs=opus')) {
                    mimeType = 'audio/webm;codecs=opus';
                } else if (MediaRecorder.isTypeSupported('audio/mp4')) {
                    mimeType = 'audio/mp4';
                } else if (MediaRecorder.isTypeSupported('audio/ogg;codecs=opus')) {
                    mimeType = 'audio/ogg;codecs=opus';
                }

                mediaRecorder = new MediaRecorder(audioStream, {
                    mimeType: mimeType
                });
                audioChunks = [];
                
                mediaRecorder.ondataavailable = (event) => {
                    if (event.data && event.data.size > 0) {
                        audioChunks.push(event.data);
                        console.log('Chunk de áudio coletado:', event.data.size, 'bytes');
                    }
                };
                
                mediaRecorder.onstop = async () => {
                    console.log('MediaRecorder parou. Processando áudio...');
                    try {
                        if (audioChunks.length === 0) {
                            console.error('Nenhum chunk de áudio foi coletado');
                            showNotification('Erro: nenhum áudio foi gravado', 'error');
                            return;
                        }

                        const audioBlob = new Blob(audioChunks, { 
                            type: mimeType
                        });
                        
                        console.log('Blob criado:', audioBlob.size, 'bytes, tipo:', audioBlob.type);
                        
                        if (audioBlob.size === 0) {
                            console.error('Blob de áudio está vazio');
                            showNotification('Erro: arquivo de áudio vazio', 'error');
                            return;
                        }

                        const duration = Math.max(0.5, (Date.now() - recordingStartTime) / 1000);
                        
                        console.log('Duração calculada:', duration, 'segundos');
                        
                        // Send the audio
                        await sendAudioMessage(audioBlob, duration);
                        
                    } catch (error) {
                        console.error('Erro ao processar áudio:', error);
                        showNotification('Erro ao processar gravação de áudio: ' + error.message, 'error');
                    }
                };

                mediaRecorder.onerror = (event) => {
                    console.error('Erro do MediaRecorder:', event.error);
                    showNotification('Erro durante a gravação: ' + event.error.message, 'error');
                    resetRecordingUI();
                };
                
                // Start recording
                mediaRecorder.start(100); // Collect data every 100ms for better quality
                isRecording = true;
                recordingStartTime = Date.now();
                
                // Update UI
                updateRecordingUI(true);
                
                console.log('Gravação iniciada com formato:', mimeType);
                showNotification('🎤 Gravação iniciada...', 'info');
                
            } catch (error) {
                console.error('Erro ao acessar microfone:', error);
                resetRecordingUI();
                
                if (error.name === 'NotAllowedError') {
                    showNotification('Permissão para acessar o microfone foi negada. Por favor, permita o acesso e tente novamente.', 'error');
                } else if (error.name === 'NotFoundError') {
                    showNotification('Nenhum microfone encontrado. Verifique se há um microfone conectado.', 'error');
                } else {
                    showNotification('Erro ao acessar microfone: ' + error.message, 'error');
                }
            }
        }

        async function stopRecording() {
            if (mediaRecorder && isRecording) {
                try {
                    console.log('Parando gravação...');
                    mediaRecorder.stop();
                    isRecording = false;
                    
                    // Stop microphone stream
                    if (audioStream) {
                        audioStream.getTracks().forEach(track => {
                            track.stop();
                            console.log('Track parada:', track.kind);
                        });
                        audioStream = null;
                    }
                    
                    // Update UI
                    updateRecordingUI(false);
                    
                    console.log('Gravação parada. Processando...');
                    showNotification('🎤 Processando gravação...', 'info');
                    
                } catch (error) {
                    console.error('Erro ao parar gravação:', error);
                    resetRecordingUI();
                }
            }
        }

        function updateRecordingUI(recording) {
            const audioBtn = document.getElementById('audioBtn');
            const audioIcon = document.getElementById('audioIcon');
            
            if (recording) {
                audioBtn.classList.add('recording');
                audioIcon.className = 'bx bx-stop';
                audioBtn.title = 'Parar gravação';
            } else {
                audioBtn.classList.remove('recording');
                audioIcon.className = 'bx bx-microphone';
                audioBtn.title = 'Gravar áudio';
            }
        }

        function resetRecordingUI() {
            isRecording = false;
            updateRecordingUI(false);
            
            if (audioStream) {
                audioStream.getTracks().forEach(track => track.stop());
                audioStream = null;
            }
        }

        async function sendAudioMessage(audioBlob, duration) {
            try {
                // Check connection
                if (!connection || connection.state !== signalR.HubConnectionState.Connected) {
                    console.warn('Conexão não está ativa. Tentando reconectar...');
                    showNotification('Reconectando...', 'info');
                    await startConnection();
                    
                    // Wait a bit for reconnection
                    await new Promise(resolve => setTimeout(resolve, 1000));
                    
                    if (!connection || connection.state !== signalR.HubConnectionState.Connected) {
                        throw new Error('Não foi possível reconectar');
                    }
                }

                // Convert audio to base64
                const reader = new FileReader();
                
                const audioDataPromise = new Promise((resolve, reject) => {
                    reader.onload = () => resolve(reader.result);
                    reader.onerror = () => reject(new Error('Erro ao ler arquivo de áudio'));
                    reader.readAsDataURL(audioBlob);
                });

                const audioData = await audioDataPromise;
                
                if (!audioData || audioData.length < 100) {
                    throw new Error('Dados de áudio inválidos');
                }
                
                console.log('Enviando áudio...', { 
                    duration: duration.toFixed(2), 
                    dataSize: audioData.length,
                    blobSize: audioBlob.size,
                    type: audioBlob.type
                });
                
                // Send based on current chat
                if (currentChat === 'public') {
                    await connection.invoke("SendPublicAudio", currentUser, audioData, duration);
                    console.log('Áudio público enviado com sucesso!');
                } else if (currentChat === 'private' && selectedUser) {
                    await connection.invoke("SendPrivateAudio", currentUser, selectedUser, audioData, duration);
                    console.log('Áudio privado enviado com sucesso para', selectedUser);
                } else {
                    throw new Error('Selecione um chat para enviar o áudio');
                }
                
                showNotification('✅ Áudio enviado com sucesso!', 'success');
                
            } catch (err) {
                console.error('Erro ao enviar áudio:', err);
                showNotification('❌ Erro ao enviar áudio: ' + err.message, 'error');
                
                // Try to reconnect if it's a connection issue
                if (err.message && (err.message.includes('connection') || err.message.includes('invoke'))) {
                    console.log('Tentando reconectar devido a erro de conexão...');
                    setTimeout(async () => {
                        try {
                            await startConnection();
                        } catch (reconnectError) {
                            console.error('Erro ao reconectar:', reconnectError);
                        }
                    }, 2000);
                }
            }
        }

        function addAudioMessage(userName, audioData, duration, time, chatType, isSent = false) {
            if ((chatType === 'public' && currentChat !== 'public') || 
                (chatType === 'private' && currentChat !== 'private')) {
                return;
            }

            const messagesList = document.getElementById('messagesList');
            const isCurrentUser = userName === currentUser || isSent;
            const avatar = generateAvatar(userName);
            
            const messageElement = document.createElement('li');
            messageElement.className = `message ${isCurrentUser ? 'sent' : 'received'}`;
            
            const audioId = 'audio_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
            
            messageElement.innerHTML = `
                <div class="message-avatar" style="background: ${avatar.color}">
                    ${avatar.initial}
                </div>
                <div class="message-content-wrapper">
                    ${!isCurrentUser ? `<div class="message-sender">${userName}</div>` : ''}
                    <div class="message-content">
                        <div class="audio-message">
                            <div class="audio-controls">
                                <button class="audio-play-btn" onclick="toggleAudioPlayback('${audioId}')">
                                    <i class="bx bx-play" id="icon_${audioId}"></i>
                                </button>
                                <div class="audio-waveform">
                                    <div class="audio-progress" id="progress_${audioId}"></div>
                                </div>
                                <div class="audio-duration">${formatDuration(duration)}</div>
                            </div>
                            <audio id="${audioId}" preload="metadata">
                                <source src="${audioData}" type="audio/wav">
                            </audio>
                        </div>
                    </div>
                    <div class="message-time">${time}</div>
                </div>
            `;
            
            messagesList.appendChild(messageElement);
            scrollToBottom();
        }

        function toggleAudioPlayback(audioId) {
            const audio = document.getElementById(audioId);
            const icon = document.getElementById('icon_' + audioId);
            const progress = document.getElementById('progress_' + audioId);
            
            if (audio.paused) {
                // Stop all other audios
                document.querySelectorAll('audio').forEach(a => {
                    if (a.id !== audioId) {
                        a.pause();
                        a.currentTime = 0;
                        const otherIcon = document.getElementById('icon_' + a.id);
                        if (otherIcon) otherIcon.className = 'bx bx-play';
                        const otherProgress = document.getElementById('progress_' + a.id);
                        if (otherProgress) otherProgress.style.width = '0%';
                    }
                });
                
                audio.play();
                icon.className = 'bx bx-pause';
                
                // Update progress
                audio.ontimeupdate = () => {
                    const percentage = (audio.currentTime / audio.duration) * 100;
                    progress.style.width = percentage + '%';
                };
                
                audio.onended = () => {
                    icon.className = 'bx bx-play';
                    progress.style.width = '0%';
                };
                
            } else {
                audio.pause();
                audio.currentTime = 0;
                icon.className = 'bx bx-play';
                progress.style.width = '0%';
            }
        }

        function formatDuration(seconds) {
            const mins = Math.floor(seconds / 60);
            const secs = Math.floor(seconds % 60);
            return `${mins}:${secs.toString().padStart(2, '0')}`;
        }

        function toggleChatMode() {
            if (currentChat === 'public') {
                if (selectedUser) {
                    selectPrivateChat(selectedUser);
                }
            } else {
                selectPublicChat();
            }
        }

        async function updateUsersList() {
            // This will trigger the server to send updated users list
        }

        // Event listeners
        document.getElementById('joinChatBtn').addEventListener('click', joinChat);
        document.getElementById('usernameInput').addEventListener('keypress', (e) => {
            if (e.key === 'Enter') joinChat();
        });

        document.getElementById('messageForm').addEventListener('submit', (e) => {
            e.preventDefault();
            sendMessage();
        });

        document.getElementById('messageInput').addEventListener('keypress', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                sendMessage();
            }
        });

        // Search functionality
        document.getElementById('searchUsers').addEventListener('input', (e) => {
            const searchTerm = e.target.value.toLowerCase();
            const userItems = document.querySelectorAll('#userList li:not(:first-child)');
            
            userItems.forEach(item => {
                const userName = item.textContent.toLowerCase();
                item.style.display = userName.includes(searchTerm) ? 'block' : 'none';
            });
        });
    </script>
</body>
</html>
